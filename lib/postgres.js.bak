const _0x217775=_0x2dd1;(function(_0x2c1924,_0x35096b){const _0x5dda08=_0x2dd1,_0x1eab4e=_0x2c1924();while(!![]){try{const _0x2c607a=-parseInt(_0x5dda08(0x1f2))/0x1*(parseInt(_0x5dda08(0x1f0))/0x2)+-parseInt(_0x5dda08(0x1ec))/0x3*(parseInt(_0x5dda08(0x1ef))/0x4)+parseInt(_0x5dda08(0x1eb))/0x5+-parseInt(_0x5dda08(0x1e7))/0x6+parseInt(_0x5dda08(0x1f7))/0x7*(parseInt(_0x5dda08(0x1e8))/0x8)+parseInt(_0x5dda08(0x1f5))/0x9+parseInt(_0x5dda08(0x1f4))/0xa;if(_0x2c607a===_0x35096b)break;else _0x1eab4e['push'](_0x1eab4e['shift']());}catch(_0x59661e){_0x1eab4e['push'](_0x1eab4e['shift']());}}}(_0x47ff,0x29733));function _0x47ff(){const _0x9735e9=['331345hUaeUe','9DCMzwW','skyultra-bot-client','update','40716qYPSKu','2286HmBmjD','hex','277aLnSyt','now','1103940wAJdDL','1997262lEfJmc','Bearer\x20skyultra-bot-access-2025','553iRwfVY','config','toString','544602jgTcJa','21176KdRPcl','sha256','text'];_0x47ff=function(){return _0x9735e9;};return _0x47ff();}import _0x40f660 from'node-fetch';import _0x210a3a from'crypto';import _0x2d230f from'pg';function _0x2dd1(_0x3354ed,_0x2fb64c){const _0x47ffa7=_0x47ff();return _0x2dd1=function(_0x2dd1b0,_0x43f406){_0x2dd1b0=_0x2dd1b0-0x1e6;let _0x35ab6a=_0x47ffa7[_0x2dd1b0];return _0x35ab6a;},_0x2dd1(_0x3354ed,_0x2fb64c);}import _0x2d57b5 from'dotenv';_0x2d57b5[_0x217775(0x1f8)]();const {Pool}=_0x2d230f,SECRET='SkyUltraSuperSecretKey2025',timestamp=Date[_0x217775(0x1f3)]()[_0x217775(0x1e6)](),signature=_0x210a3a['createHmac'](_0x217775(0x1e9),SECRET)[_0x217775(0x1ee)](timestamp)['digest'](_0x217775(0x1f1)),res=await _0x40f660('https://db-private.vercel.app/api/pg',{'headers':{'Authorization':_0x217775(0x1f6),'User-Agent':_0x217775(0x1ed),'x-timestamp':timestamp,'x-signature':signature}}),POSTGRES_URI=(await res[_0x217775(0x1ea)]())['trim']();export const db=new Pool({'connectionString':POSTGRES_URI});

db.connect()
  .then(() => console.log("✅ Base de datos (PostgreSQL) conectado con éxito."))
  .catch(err => console.error("[ ❌ ] Error al conectar a PostgreSQL:", err));

async function initTables() {
  try {
    await db.query(`
      CREATE TABLE IF NOT EXISTS group_settings (
        group_id TEXT PRIMARY KEY
      );
    `);

    const columnasGrupos = [
      ['welcome', 'BOOLEAN DEFAULT true']
    ];

    for (const [columna, tipo] of columnasGrupos) {
      await db.query(`ALTER TABLE group_settings ADD COLUMN IF NOT EXISTS ${columna} ${tipo}`);
    }

    await db.query(`
      CREATE TABLE IF NOT EXISTS usuarios (
        id TEXT PRIMARY KEY
      );
    `);

    const columnasUsuarios = [
      ['nombre', 'TEXT'],
      ['registered', 'BOOLEAN DEFAULT false'],
      ['warn', 'INTEGER DEFAULT 0']
    ];

    for (const [columna, tipo] of columnasUsuarios) {
      await db.query(`ALTER TABLE usuarios ADD COLUMN IF NOT EXISTS ${columna} ${tipo}`);
    }

    await db.query(`
      CREATE TABLE IF NOT EXISTS chats (
        id TEXT PRIMARY KEY
      );
    `);

    await db.query(`
      CREATE TABLE IF NOT EXISTS messages (
        user_id TEXT,
        group_id TEXT,
        message_count INTEGER DEFAULT 0,
        PRIMARY KEY (user_id, group_id)
      );
    `);
    
    await db.query(`
      CREATE TABLE IF NOT EXISTS characters (
        id SERIAL PRIMARY KEY,
        name TEXT NOT NULL,
        url TEXT NOT NULL,
        tipo TEXT,
        anime TEXT,
        rareza TEXT,
        price INTEGER NOT NULL,
        previous_price INTEGER,
        claimed_by TEXT,
        for_sale BOOLEAN DEFAULT false,
        seller TEXT,
        votes INTEGER DEFAULT 0,
        last_removed_time BIGINT
      );
    `);

await db.query(`
  CREATE TABLE IF NOT EXISTS stats (
    command TEXT PRIMARY KEY,
    count INTEGER DEFAULT 1
  );
`);
  } catch (err) {
    console.error("[❌] Error creando tablas o columnas:", err);
  }
}

initTables();